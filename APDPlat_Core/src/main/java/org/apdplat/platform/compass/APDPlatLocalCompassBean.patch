7a7e83eeb8c32187665900a9b6f54a4d86cd7168
 APDPlatLocalCompassBean.java | 99 ++++++++++++++++++++++++++++++--------------
 1 file changed, 68 insertions(+), 31 deletions(-)

diff --git a/APDPlatLocalCompassBean.java b/APDPlatLocalCompassBean.java
index 7255482..fb0bc0a 100644
--- a/APDPlatLocalCompassBean.java
+++ b/APDPlatLocalCompassBean.java
@@ -1,22 +1,27 @@
-/*
- * Copyright 2004-2009 the original author or authors.
+/**
+ * 
+ * APDPlat - Application Product Development Platform
+ * Copyright (c) 2013, 杨尚川, yang-shangchuan@qq.com
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
  * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
  * 
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
  */
 
-package org.compass.spring;
+package org.apdplat.platform.compass;
 
 import java.io.File;
+import java.io.IOException;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.InvocationTargetException;
@@ -27,9 +32,10 @@ import java.util.Map;
 import java.util.Properties;
 import java.util.Set;
 import javax.sql.DataSource;
+import org.apdplat.platform.log.APDPlatLogger;
+import org.apdplat.platform.search.IndexManager;
+import org.apdplat.platform.util.FileUtils;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.compass.core.Compass;
 import org.compass.core.CompassException;
 import org.compass.core.config.CompassConfiguration;
@@ -41,6 +47,7 @@ import org.compass.core.lucene.LuceneEnvironment;
 import org.compass.core.lucene.engine.store.jdbc.ExternalDataSourceProvider;
 import org.compass.core.spi.InternalCompass;
 import org.compass.core.util.ClassUtils;
+import org.compass.spring.LocalCompassBeanPostProcessor;
 import org.compass.spring.transaction.SpringSyncTransactionFactory;
 import org.springframework.beans.BeansException;
 import org.springframework.beans.factory.BeanClassLoaderAware;
@@ -51,6 +58,8 @@ import org.springframework.beans.factory.InitializingBean;
 import org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.ApplicationContextAware;
+import org.springframework.core.io.ClassPathResource;
+import org.springframework.core.io.FileSystemResource;
 import org.springframework.core.io.Resource;
 import org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy;
 import org.springframework.transaction.PlatformTransactionManager;
@@ -58,9 +67,9 @@ import org.springframework.transaction.PlatformTransactionManager;
 /**
  * @author kimchy
  */
-public class LocalCompassBean implements FactoryBean, InitializingBean, DisposableBean, BeanNameAware, ApplicationContextAware, BeanClassLoaderAware {
+public class APDPlatLocalCompassBean implements FactoryBean, InitializingBean, DisposableBean, BeanNameAware, ApplicationContextAware, BeanClassLoaderAware {
 
-    protected static final Log log = LogFactory.getLog(LocalCompassBean.class);
+    protected static final APDPlatLogger log = new APDPlatLogger(APDPlatLocalCompassBean.class);
 
     private Resource connection;
 
@@ -72,9 +81,9 @@ public class LocalCompassBean implements FactoryBean, InitializingBean, Disposab
 
     private Resource[] resourceLocations;
 
-    private Resource[] resourceJarLocations;
+    private String resourceJarLocations;
 
-    private Resource[] resourceDirectoryLocations;
+    private String resourceDirectoryLocations;
 
     private String[] classMappings;
 
@@ -130,7 +139,16 @@ public class LocalCompassBean implements FactoryBean, InitializingBean, Disposab
      * path.
      */
     public void setConnection(Resource connection) {
-        this.connection = connection;
+        //this.connection = connection;
+        //忽略compass注入的相对路径
+        //这里从索引管理器中获取索引的绝对路径
+        Resource resource = new FileSystemResource(IndexManager.getIndexDir());
+        this.connection = resource;
+        try {
+            log.info("开始执行apdplat对compass的定制修改1 :将索引目录路径【 " + connection.getFile().getPath() + " 】修改成路径【 " + this.connection.getFile().getAbsolutePath() + "】");
+        } catch (IOException ex) {
+            ex.printStackTrace();
+        }
     }
 
     /**
@@ -191,7 +209,7 @@ public class LocalCompassBean implements FactoryBean, InitializingBean, Disposab
      * Can be used to add to mappings from a Compass XML config file, or to
      * specify all mappings locally.
      */
-    public void setResourceJarLocations(Resource[] resourceJarLocations) {
+    public void setResourceJarLocations(String resourceJarLocations) {
         this.resourceJarLocations = resourceJarLocations;
     }
 
@@ -202,7 +220,7 @@ public class LocalCompassBean implements FactoryBean, InitializingBean, Disposab
      * Can be used to add to mappings from a Compass XML config file, or to
      * specify all mappings locally.
      */
-    public void setResourceDirectoryLocations(Resource[] resourceDirectoryLocations) {
+    public void setResourceDirectoryLocations(String resourceDirectoryLocations) {
         this.resourceDirectoryLocations = resourceDirectoryLocations;
     }
 
@@ -301,9 +319,18 @@ public class LocalCompassBean implements FactoryBean, InitializingBean, Disposab
             }
         }
 
-        if (resourceJarLocations != null) {
-            for (Resource resourceJarLocation : resourceJarLocations) {
-                config.addJar(resourceJarLocation.getFile());
+        if (resourceJarLocations != null && !"".equals(resourceJarLocations.trim())) {
+            log.info("开始执行apdplat对compass的定制修改2");
+            log.info("compass resourceJarLocations:" + resourceJarLocations);
+            String[] jars = resourceJarLocations.split(",");
+            for (String jar : jars) {
+                try {
+                    FileSystemResource resource = new FileSystemResource(FileUtils.getAbsolutePath(jar));
+                    config.addJar(resource.getFile());
+                    log.info("compass resourceJarLocations  find:" + jar);
+                } catch (Exception e) {
+                    log.info("compass resourceJarLocations not exists:" + jar);
+                }
             }
         }
 
@@ -313,14 +340,24 @@ public class LocalCompassBean implements FactoryBean, InitializingBean, Disposab
             }
         }
 
-        if (resourceDirectoryLocations != null) {
-            for (Resource resourceDirectoryLocation : resourceDirectoryLocations) {
-                File file = resourceDirectoryLocation.getFile();
-                if (!file.isDirectory()) {
-                    throw new IllegalArgumentException("Resource directory location ["
-                            + resourceDirectoryLocation + "] does not denote a directory");
+        if (resourceDirectoryLocations != null && !"".equals(resourceDirectoryLocations.trim())) {
+            log.info("开始执行apdplat对compass的定制修改3");
+            log.info("compass resourceDirectoryLocations:" + resourceDirectoryLocations);
+            String[] dirs = resourceDirectoryLocations.split(",");
+            for (String dir : dirs) {
+                ClassPathResource resource = new ClassPathResource(dir);
+                try {
+                    File file = resource.getFile();
+                    if (!file.isDirectory()) {
+                        log.info("Resource directory location ["
+                                + dir + "] does not denote a directory");
+                    } else {
+                        config.addDirectory(file);
+                    }
+                    log.info("compass resourceDirectoryLocations find:" + dir);
+                } catch (Exception e) {
+                    log.info("compass resourceDirectoryLocations not exists:" + dir);
                 }
-                config.addDirectory(file);
             }
         }